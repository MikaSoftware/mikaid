# Generated by Django 2.1.5 on 2019-01-15 02:03

from django.db import migrations, models
import foundation.models.user
import starterkit.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('tenant_id', models.BigIntegerField(blank=True, db_index=True, default=0, help_text='The tenant ID whom this user vault belongs to.')),
                ('email', models.EmailField(db_index=True, help_text='Email address.', max_length=254, unique=True, verbose_name='Email')),
                ('first_name', models.CharField(blank=True, db_index=True, help_text='The users given name.', max_length=63, null=True, verbose_name='First Name')),
                ('middle_name', models.CharField(blank=True, db_index=True, help_text='The users middle name.', max_length=63, null=True, verbose_name='Middle Name')),
                ('last_name', models.CharField(blank=True, db_index=True, help_text='The users last name.', max_length=63, null=True, verbose_name='Last Name')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('birthdate', models.DateField(blank=True, help_text='The users birthdate.', null=True, verbose_name='Birthdate')),
                ('nationality', models.CharField(blank=True, help_text='Nationality of the person.', max_length=63, null=True, verbose_name='Nationality')),
                ('gender', models.CharField(blank=True, help_text='Gender of the person. While Male and Female may be used, text strings are also acceptable for people who do not identify as a binary gender.', max_length=63, null=True, verbose_name='Gender')),
                ('is_active', models.BooleanField(blank=True, default=True, verbose_name='active')),
                ('is_staff', models.BooleanField(blank=True, default=False, verbose_name='Is Staff')),
                ('is_superuser', models.BooleanField(blank=True, default=False, verbose_name='Is Superuser')),
                ('salt', models.CharField(blank=True, default=starterkit.utils.generate_hash, help_text='The unique salt value me with this object.', max_length=127, null=True, unique=True, verbose_name='Salt')),
                ('type_of', models.PositiveSmallIntegerField(blank=True, db_index=True, default=0, help_text='The type of user this is. Value represents ID of user type.', verbose_name='Type of')),
                ('is_ok_to_email', models.BooleanField(blank=True, default=True, help_text='Indicates whether customer allows being reached by email', verbose_name='Is OK to email')),
                ('is_ok_to_text', models.BooleanField(blank=True, default=True, help_text='Indicates whether customer allows being reached by text.', verbose_name='Is OK to text')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('was_email_activated', models.BooleanField(blank=True, default=False, help_text='Was the email address verified?', verbose_name='Was Email Activated')),
                ('pr_access_code', models.CharField(blank=True, default=starterkit.utils.generate_hash, help_text='The access code to enter the password reset page to be granted access to restart your password.', max_length=127, verbose_name='Password Reset Access Code')),
                ('pr_expiry_date', models.DateTimeField(blank=True, default=foundation.models.user.get_expiry_date, help_text='The date where the access code expires and no longer works.', verbose_name='Password Reset Access Code Expiry Date')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'mika_users',
                'permissions': (),
                'default_permissions': (),
            },
            managers=[
                ('objects', foundation.models.user.UserManager()),
            ],
        ),
    ]
